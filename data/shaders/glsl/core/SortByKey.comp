#version 450
#extension GL_GOOGLE_include_directive : require
#include "../base/Common.glsl"
#include "../core/BitonicSort.glsl"

#define T int
#define DataType T

layout(binding = 0) buffer Key
{
	DataType key[];
};
layout(binding = 1) buffer Value
{
	DataType value[];
};
shared DataType local_key[SORT_LOCAL_SIZE];
shared DataType local_value[SORT_LOCAL_SIZE];

void prepare_local(in int local_idx, in int global_idx) {
    local_key[local_idx] = key[global_idx];
    local_value[local_idx] = value[global_idx];
}
void output_global(in int global_idx, in int local_idx) {
    key[global_idx] = local_key[local_idx];
    value[global_idx] = local_value[local_idx];
}
void compare_swap_global(in int idx1, in int idx2) {
	bool cmp = key[idx1] < key[idx2];
    if(SORT_DIRECTION == SORT_UP ? !cmp : cmp) {
		DataType t = key[idx1];
		key[idx1] = key[idx2];
		key[idx2] = t;

        t = value[idx1];
        value[idx1] = value[idx2];
        value[idx2] = t;
    }
}
void compare_swap_local(in int idx1, in int idx2) {
	bool cmp = local_key[idx1] < local_key[idx2];
    if(SORT_DIRECTION == SORT_UP ? !cmp : cmp) {
		DataType t = local_key[idx1];
		local_key[idx1] = local_key[idx2];
		local_key[idx2] = t;

        t = local_value[idx1];
        local_value[idx1] = local_value[idx2];
        local_value[idx2] = t;
    }
}

void main() {
    sort();
}
